### 参考自https://github.com/yyhhyyyyyy/selfproxy
### 全局配置
mixed-port: 7897
allow-lan: true
mode: rule
log-level: warning
ipv6: false
find-process-mode: strict
### 如果使用的是裸核，需要将下面的注释去掉，方便ui界面的使用
# external-controller: 0.0.0.0:9988
# external-ui: ui
# external-ui-url: 'https://testingcf.jsdelivr.net/gh/Zephyruso/zashboard@releases/latest/download/dist.zip'
# secret: "114514yijiuyijiubayiling"
profile:
  store-selected: true
  store-fake-ip: true
unified-delay: true
tcp-concurrent: true
global-client-fingerprint: chrome

### DNS配置
dns:
  enable: true
  listen: 0.0.0.0:53
  ipv6: false
  prefer-h3: true
  enhanced-mode: fake-ip
  use-hosts: true
  use-system-hosts: true
  nameserver:
    - https://223.5.5.5/dns-query
    - https://dns.pub/dns-query
    - https://dns.flymc.cc/dns-query
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter: ['rule-set:fakeip-filter,trackerslist,private,cn']
  nameserver-policy:
    {
      'rule-set:reject_non_ip,reject_domainset,reject_non_ip_drop,reject_non_ip_no_drop':
        [rcode://success]
    }

### 域名嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - 'Mijia Cloud'
    - dlg.io.mi.com
    - '+.push.apple.com'

### Tunnel配置
tun:
  enable: false
  stack: system
  device: Ethernet 99
  auto-route: true
  auto-detect-interface: true
  dns-hijack:
    - any:53
    - tcp://any:53
  strict-route: true
  mtu: 1500
  # 如果有使用zerotier或者headscale等，需要自己配置排除自己的网段
  # route-exclude-address: ["192.168.110.0/24"]

proxies:
  - name: '🟢 直连'
    type: direct
    udp: true

# 锚点
pr:
  &pr {
    type: select,
    proxies:
      [
        🚀 节点选择,
        🔯 香港故转,
        🔯 日本故转,
        🔯 新加坡故转,
        🔯 自建故转,
        ♻️ 香港自动,
        ♻️ 日本自动,
        ♻️ 新加坡自动,
        ♻️ 美国自动,
        ♻️ 自建节点,
        ♻️ 自动选择,
        🇭🇰 香港节点,
        🇯🇵 日本节点,
        🇸🇬 新加坡节点,
        🇺🇲 美国节点,
        🌐 全部节点,
        🟢 直连
      ]
  }
# 策略组
proxy-groups:
  - {
      name: 🚀 节点选择,
      type: select,
      proxies:
        [
          🔯 香港故转,
          🔯 日本故转,
          🔯 新加坡故转,
          🔯 自建故转,
          ♻️ 香港自动,
          ♻️ 日本自动,
          ♻️ 新加坡自动,
          ♻️ 美国自动,
          ♻️ 自建节点,
          ♻️ 自动选择,
          🇭🇰 香港节点,
          🇯🇵 日本节点,
          🇸🇬 新加坡节点,
          🇺🇲 美国节点,
          🌐 全部节点,
          🟢 直连
        ]
    }
  - { name: 📹 YouTube, !!merge <<: *pr }
  - { name: 🍀 Google, !!merge <<: *pr }
  - { name: 🤖 ChatGPT, !!merge <<: *pr }
  - { name: 👨🏿‍💻 GitHub, !!merge <<: *pr }
  - { name: 🐬 OneDrive, !!merge <<: *pr }
  - { name: 🪟 Microsoft, !!merge <<: *pr }
  - { name: 🎵 TikTok, !!merge <<: *pr }
  - { name: 📲 Telegram, !!merge <<: *pr }
  - { name: 🎥 NETFLIX, !!merge <<: *pr }
  - { name: ✈️ Speedtest, !!merge <<: *pr }
  - { name: 💶 PayPal, !!merge <<: *pr }
  - { name: 🍎 Apple, type: select, proxies: [🟢 直连, 🚀 节点选择] }
  - { name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择] }
  - { name: 🐟 漏网之鱼, !!merge <<: *pr }
  - {
      name: 🇭🇰 香港节点,
      type: select,
      include-all: true,
      filter: '(?i)港|hk|hongkong|hong kong'
    }
  - {
      name: 🇯🇵 日本节点,
      type: select,
      include-all: true,
      filter: '(?i)日|jp|japan'
    }
  - {
      name: 🇸🇬 新加坡节点,
      type: select,
      include-all: true,
      filter: '(?i)新|sg|singapore'
    }
  - {
      name: 🇺🇲 美国节点,
      type: select,
      include-all: true,
      filter: '(?i)美|us|unitedstates|united states'
    }
  - {
      name: 🔯 香港故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$'
    }
  - {
      name: 🔯 日本故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$'
    }
  - {
      name: 🔯 新加坡故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(新|SG|(?i)Singapore))^((?!(台|日|韩|港|深|美)).)*$'
    }
  - {
      name: 🔯 自建故转,
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(自建|ZJ|cloudcone))^((?!(港|台|日|韩|新|美)).)*$'
    }
  - {
      name: ♻️ 香港自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$'
    }
  - {
      name: ♻️ 日本自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$'
    }
  - {
      name: ♻️ 新加坡自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(新|SG|(?i)Singapore))^((?!(台|日|韩|港|美)).)*$'
    }
  - {
      name: ♻️ 美国自动,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$'
    }
  - {
      name: ♻️ 自建节点,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '(?=.*(自建|ZJ|cloudcone))^((?!(港|台|日|韩|新|美)).)*$'
    }
  - {
      name: ♻️ 自动选择,
      type: url-test,
      include-all: true,
      tolerance: 20,
      interval: 300,
      filter: '^((?!(直连)).)*$'
    }
  - { name: 🌐 全部节点, type: select, include-all: true }
rules:
  - RULE-SET,private_domain,🟢 直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - IP-CIDR,127.0.0.0/8,DIRECT
  - IP-CIDR,172.16.0.0/12,DIRECT
  - IP-CIDR,192.168.0.0/16,DIRECT
  - IP-CIDR,10.0.0.0/8,DIRECT
  - IP-CIDR,17.0.0.0/8,DIRECT
  - IP-CIDR,100.64.0.0/10,DIRECT
  - IP-CIDR,224.0.0.0/4,DIRECT
  - IP-CIDR,203.0.113.0/24,DIRECT
  - IP-CIDR,192.0.2.0/24,DIRECT
  - IP-CIDR6,fe80::/10,DIRECT
  - GEOIP,LAN,🟢 直连
  - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  qcy: &qcy { type: http, interval: 86400, behavior: domain, format: text }
  class:
    &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  private_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs'
    }
  proxylite:
    {
      !!merge <<: *qcy,
      url: 'https://raw.githubusercontent.com/qcyhub/rule/master/ProxyLite.list'
    }
  ai:
    {
      !!merge <<: *qcy,
      url: 'https://raw.githubusercontent.com/qcyhub/rule/master/AI.list'
    }
  youtube_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs'
    }
  google_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs'
    }
  github_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs'
    }
  telegram_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs'
    }
  netflix_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs'
    }
  paypal_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs'
    }
  onedrive_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs'
    }
  microsoft_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs'
    }
  apple_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs'
    }
  speedtest_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs'
    }
  tiktok_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs'
    }
  gfw_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs'
    }
  geolocation-!cn:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs'
    }
  cn_domain:
    {
      !!merge <<: *domain,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs'
    }

  cn_ip:
    {
      !!merge <<: *ip,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs'
    }
  google_ip:
    {
      !!merge <<: *ip,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs'
    }
  telegram_ip:
    {
      !!merge <<: *ip,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs'
    }
  netflix_ip:
    {
      !!merge <<: *ip,
      url: 'https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs'
    }
